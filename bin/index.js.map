{"version":3,"file":"index.js","sourceRoot":"","sources":["../src/index.ts"],"names":[],"mappings":";;;;;;;;;;;;AAAA,iEAA2C;AAE3C,oDAAsC;AACtC,wDAA0C;AAE1C,MAAM,GAAG,GAAG,iBAAS,EAAE,CAAC;AAExB,CAAC,KAAK,IAAI,EAAE;IAER,MAAM,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,EAAC,GAAmB,MAAM,GAAG,CAAC,GAAG,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAC,CAAC,CAAC;IAC7F,OAAO,CAAC,GAAG,CAAC,0BAA0B,OAAO,EAAE,CAAC,CAAC;IAGjD,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,UAAU,CAAC,EAAE;QAC/B,OAAO,CAAC,GAAG,CAAC,8GAA8G,CAAC,CAAC;QAC5H,OAAO;KACV;IAGD,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAElD,IAAI,CAAC,WAAW,EAAE;QACd,MAAM,IAAI,KAAK,CAAC,2DAA2D,CAAC,CAAC;KAChF;IAED,MAAM,EAAE,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,EAAG,GAAG,EAAE,GAAG,MAAM,CAAC,OAAO,CAAC;IACvD,MAAM,YAAY,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,OAAO,CAAC,GAAG,CAAC,iBAAiB,YAAY,EAAE,CAAC,CAAC;IAE7C,IAAI,CAAC,YAAY,IAAI,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE;QAC7D,MAAM,IAAI,KAAK,CAAC,0EAA0E,CAAC,CAAC;KAC/F;IAKD,MAAM,oBAAoB,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC,CAAC;IAC/E,MAAM,cAAc,GAAG,MAAM,GAAG,CAAC,QAAQ,CAAC,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC,CAAC;IAErE,IAAI,cAAc,KAAK,oBAAoB,EAAE;QAEzC,OAAO,CAAC,GAAG,CAAC,qEAAqE,CAAC,CAAC;QAEnF,OAAO;KACV;IAKD,MAAM,MAAM,GAAG,IAAI,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,MAAM,YAAY,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;QAC9C,IAAI;QACJ,KAAK;QACL,MAAM,EAAE,QAAQ;KACnB,CAAC,CAAC;IACH,MAAM,WAAW,GAAG,MAAM,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;QAC7C,IAAI;QACJ,KAAK;QACL,MAAM,EAAE,OAAO;KAClB,CAAC,CAAC;IAEH,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAA;AAI7B,CAAC,CAAC,EAAE,CAAC;AAEL,UAAU","sourcesContent":["import simpleGit from 'simple-git/promise';\r\nimport { ListLogSummary } from 'simple-git/typings/response';\r\nimport * as core from '@actions/core';\r\nimport * as github from '@actions/github';\r\n\r\nconst git = simpleGit();\r\n\r\n(async () => {\r\n\r\n    const { latest: { message }}: ListLogSummary = await git.log({'-1': null, '--pretty': '%B'});\r\n    console.log(`latest commit message: ${message}`);\r\n\r\n\r\n    if (!message.includes('FEATURE:')) {\r\n        console.log('latest commit is not a ready feature. To trigger this action use the string \"FEATURE:\" in the commit message');\r\n        return;\r\n    }\r\n\r\n\r\n    const githubToken = core.getInput('github_token');\r\n\r\n    if (!githubToken) {\r\n        throw new Error('You must set the github_token input when using the action');\r\n    }\r\n\r\n    const { repo: { owner, repo },  ref } = github.context;\r\n    const sourceBranch = ref.split('/')[2];\r\n    console.log(`sourceBranch: ${sourceBranch}`);\r\n\r\n    if (!sourceBranch || ['master', 'stage'].includes(sourceBranch)) {\r\n        throw new Error('This actions must be triggered from a branch other than stage and master');\r\n    }    \r\n\r\n\r\n    \r\n    \r\n    const revparseSourceBranch = await git.revparse(['--revs-only', sourceBranch]);\r\n    const revparseMaster = await git.revparse(['--revs-only', 'master']);\r\n\r\n    if (revparseMaster === revparseSourceBranch) {\r\n\r\n        console.log('Source and master branches are the same, no point in pull request!!');\r\n\r\n        return;\r\n    }\r\n    \r\n\r\n\r\n    \r\n    const client = new github.GitHub(githubToken);\r\n    const masterBranch = await client.repos.getBranch({\r\n        repo,\r\n        owner,\r\n        branch: 'master'\r\n    });\r\n    const stageBranch = await client.repos.getBranch({\r\n        repo,\r\n        owner,\r\n        branch: 'stage'\r\n    });\r\n\r\n    console.log(masterBranch)\r\n\r\n\r\n    \r\n})();\r\n\r\n// comment"]}